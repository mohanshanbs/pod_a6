export class icmlcompute {
    colorstyle (value){
        value = value.replace(/color/g, "Color");
        value = value.replace(/self/g, "Self");
        value = value.replace(/model/g, "Model");
        value = value.replace(/space/g, "Space");
        value = value.replace(/colorvalue/g, "ColorValue");
        value = value.replace(/Colorvalue/g, "ColorValue");
        value = value.replace(/coloroverride/g, "ColorOverride");
        value = value.replace(/Coloroverride/g, "ColorOverride");
        value = value.replace(/alternatespace/g, "AlternateSpace");
        value = value.replace(/alternateSpace/g, "AlternateSpace");
        value = value.replace(/alternatecolorvalue/g, "AlternateColorValue");
        value = value.replace(/alternateColorvalue/g, "AlternateColorValue");
        value = value.replace(/alternateColorValue/g, "AlternateColorValue");
        value = value.replace(/name/g, "Name");
        value = value.replace(/coloreditable/g, "ColorEditable");
        value = value.replace(/Coloreditable/g, "ColorEditable");
        value = value.replace(/colorremovable/g, "ColorRemovable");
        value = value.replace(/Colorremovable/g, "ColorRemovable");
        value = value.replace(/visible/g, "Visible");
        value = value.replace(/swatchcreatorid/g, "SwatchCreatorID");
        return value;
    }
  
  paragraphformat (value) {
            value = value.replace(/paragraphstyle/g, "ParagraphStyle");
            value = value.replace(/properties/g, "Properties");
            value = value.replace(/appliedfont/g, "AppliedFont");
            value = value.replace(/leading/g, "Leading");
            value = value.replace(/nobreak/g, "NoBreak");
            value = value.replace(/self/g, "Self");
            value = value.replace(/name/g, "Name");
            value = value.replace(/imported/g, "Imported");
            value = value.replace(/nextstyle/g, "NextStyle");
            value = value.replace(/keyboardshortcut/g, "KeyboardShortcut");
            value = value.replace(/basedon/g, "BasedOn");
            value = value.replace(/previewcolor/g, "PreviewColor");
            value = value.replace(/fontstyle/g, "FontStyle");
            value = value.replace(/pointsize/g, "PointSize");
            value = value.replace(/justification/g, "Justification");
            value = value.replace(/underline/g, "Underline");
            value = value.replace(/rulebelowlineweight/g, "RuleBelowLineWeight");
            value = value.replace(/rulebelowtype/g, "RuleBelowType");
            value = value.replace(/rulebelowcolor/g, "RuleBelowColor");
            value = value.replace(/rulebelowoffset/g, "RuleBelowOffset");
            value = value.replace(/rulebelowleftindent/g, "RuleBelowLeftIndent");
            value = value.replace(/ruleabovetint/g, "RuleAboveTint");
            value = value.replace(/ruleabovewidth/g, "RuleAboveWidth");
            value = value.replace(/rulebelowrightindent/g, "RuleBelowRightIndent");
            value = value.replace(/rulebelow/g, "RuleBelow");
            value = value.replace(/ruleabovelineweight/g, "RuleAboveLineWeight");
            value = value.replace(/ruleabovetype/g, "RuleAboveType");
            value = value.replace(/ruleabovecolor/g, "RuleAboveColor");
            value = value.replace(/ruleaboveoffset/g, "RuleAboveOffset");
            value = value.replace(/ruleaboveleftindent/g, "RuleAboveLeftIndent");
            value = value.replace(/ruleaboverightindent/g, "RuleAboveRightIndent");
            value = value.replace(/ruleabove/g, "RuleAbove");
            value = value.replace(/spacebefore/g, "SpaceBefore");
            value = value.replace(/spaceafter/g, "SpaceAfter");
            value = value.replace(/leftindent/g, "LeftIndent");
            value = value.replace(/rightindent/g, "RightIndent");
            value = value.replace(/strokecolor/g, "StrokeColor");
            value = value.replace(/fillcolor/g, "FillColor");
            value = value.replace(/capitalization/g, "Capitalization");
            value = value.replace(/paragraphshadingon/g, "ParagraphShadingOn");
            value = value.replace(/paragraphshadingtint/g, "ParagraphShadingTint");
            value = value.replace(/paragraphshadingcolor/g, "ParagraphShadingColor");
            value = value.replace(/paragraphshadingtopoffset/g, "ParagraphShadingTopOffset");
            value = value.replace(/paragraphshadingbottomoffset/g, "ParagraphShadingBottomOffset");
            value = value.replace(/firstlineindent/g, "FirstLineIndent");
            value = value.replace(/numberingformat/g, "NumberingFormat");
            value = value.replace(/Numberingformat/g, "NumberingFormat");
            value = value.replace(/insetspacing/g, "InsetSpacing");
            value = value.replace(/firstbaselineoffset/g, "FirstBaselineOffset");
            value = value.replace(/leadingoffset/g, "LeadingOffset");
            return value;
        }
   textformat (value) {
            value = value.replace(/characterstyle/g, "CharacterStyle");
            value = value.replace(/properties/g, "Properties");
            value = value.replace(/appliedfont/g, "AppliedFont");
            value = value.replace(/leading/g, "Leading");
            value = value.replace(/nobreak/g, "NoBreak");
            value = value.replace(/self/g, "Self");
            value = value.replace(/name/g, "Name");
            value = value.replace(/imported/g, "Imported");
            value = value.replace(/nextstyle/g, "NextStyle");
            value = value.replace(/keyboardshortcut/g, "KeyboardShortcut");
            value = value.replace(/basedon/g, "BasedOn");
            value = value.replace(/previewcolor/g, "PreviewColor");
            value = value.replace(/fontstyle/g, "FontStyle");
            value = value.replace(/pointsize/g, "PointSize");
            value = value.replace(/justification/g, "Justification");
            value = value.replace(/underline/g, "Underline");
            value = value.replace(/rulebelowlineweight/g, "RuleBelowLineWeight");
            value = value.replace(/ruleabovetint/g, "RuleAboveTint");
            value = value.replace(/ruleabovewidth/g, "RuleAboveWidth");
            value = value.replace(/rulebelowtype/g, "RuleBelowType");
            value = value.replace(/rulebelowcolor/g, "RuleBelowColor");
            value = value.replace(/rulebelowoffset/g, "RuleBelowOffset");
            value = value.replace(/rulebelowleftindent/g, "RuleBelowLeftIndent");
            value = value.replace(/rulebelowrightindent/g, "RuleBelowRightIndent");
            value = value.replace(/rulebelow/g, "RuleBelow");
            value = value.replace(/ruleabovelineweight/g, "RuleAboveLineWeight");
            value = value.replace(/ruleabovetype/g, "RuleAboveType");
            value = value.replace(/ruleabovecolor/g, "RuleAboveColor");
            value = value.replace(/ruleaboveoffset/g, "RuleAboveOffset");
            value = value.replace(/ruleaboveleftindent/g, "RuleAboveLeftIndent");
            value = value.replace(/ruleaboverightindent/g, "RuleAboveRightIndent");
            value = value.replace(/ruleabove/g, "RuleAbove");
            value = value.replace(/spacebefore/g, "SpaceBefore");
            value = value.replace(/spaceafter/g, "SpaceAfter");
            value = value.replace(/leftindent/g, "LeftIndent");
            value = value.replace(/rightindent/g, "RightIndent");
            value = value.replace(/strokecolor/g, "StrokeColor");
            value = value.replace(/fillcolor/g, "FillColor");
            value = value.replace(/capitalization/g, "Capitalization");
            value = value.replace(/charactershadingcolor/g, "CharacterShadingColor");
            value = value.replace(/charactershadingon/g, "CharacterShadingOn");
            value = value.replace(/leadingoffset/g, "LeadingOffset");
            return value;
        }
   alloutput (content) {
            content = content.replace(/<characterstylerange appliedcharacterstyle="CharacterStyle[/]ul_li_li"><content><[/]content><br><[/]characterstylerange>/g,"<Br />");
            content = content.replace(/<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle[/]ul_li" BulletsAndNumberingListType="BulletList"><[/]ParagraphStyleRange>/g,"");
            content = content.replace(/paragraphstylerange/g,"ParagraphStyleRange");
            content = content.replace(/appliedparagraphstyle/g,"AppliedParagraphStyle");
            content = content.replace(/characterstylerange/g,"CharacterStyleRange");
            content = content.replace(/appliedcharacterstyle/g,"AppliedCharacterStyle");
            content = content.replace(/bulletsandnumberinglisttype/g,"BulletsAndNumberingListType");
            content = content.replace(/<table/g,"<Table"); 
            content = content.replace(/table>/g,"Table>");
            content = content.replace(/headerrowcount/g,"HeaderRowCount");
            content = content.replace(/bodyrowcount/g,"BodyRowCount");
            content = content.replace(/columncount/g,"ColumnCount");
            content = content.replace(/Columncount/g,"ColumnCount");
            content = content.replace(/<row/g,"<Row"); 
            content = content.replace(/<[/]row/g," </Row"); 
            content = content.replace(/<column/g,"<Column"); 
            content = content.replace(/<[/]column/g," </Column"); 
            content = content.replace(/cell/g,"Cell"); 
            content = content.replace(/appliedtablestyle/g,"AppliedTableStyle"); 
            content = content.replace(/Appliedtablestyle/g,"AppliedTableStyle"); 
            content = content.replace(/AppliedTablestyle/g,"AppliedTableStyle"); 
            content = content.replace(/appliedTablestyle/g,"AppliedTableStyle"); 
            content = content.replace(/appliedCellstyle/g,"AppliedCellStyle");
            content = content.replace(/name/g,"Name"); 
            content = content.replace(/&nbsp;/g," "); 
            content = content.replace(/singleRowheight/g,"SingleRowHeight"); 
            content = content.replace(/minimumheight/g,"MinimumHeight");
            content = content.replace(/content/g,"Content"); 
            content = content.replace(/singlecolumnwidth/g,"SingleColumnWidth"); 
            content = content.replace(/Singlecolumnwidth/g,"SingleColumnWidth"); 
            content = content.replace(/SingleColumnwidth/g,"SingleColumnWidth"); 
            content = content.replace(/justification/g,"Justification"); 
            content = content.replace(/<br>/g,"<Br />");
            content = content.replace(/<ParagraphStyleRangeaside/g,'<Br /><ParagraphStyleRange');
            content = content.replace(/<[/]ParagraphStyleRangeaside>/g,'</ParagraphStyleRange>');
            content = content.replace(/<Br [/]><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle[/]sidenote-6">/g,'<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/sidenote-6"><Br />');
            content = content.replace(/<Br [/]><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle[/]sidenote-4">/g,'<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/sidenote-4"><Br />');
            content = content.replace(/<[/]ParagraphStyleRangebr>/g,'</ParagraphStyleRange><Br />');
            content = content.replace(/<ParagraphStyleRangebr/g,'<ParagraphStyleRange');
            content = content.replace(/<[/]ParagraphStyleRangepulh>/g,'<Br /></ParagraphStyleRange>');
            content = content.replace(/<ParagraphStyleRangepulh/g,'<Br /><ParagraphStyleRange');
            content = content.replace(/<[/]ParagraphStyleRangepul>/g,'</ParagraphStyleRange>');
            content = content.replace(/<ParagraphStyleRangepul/g,'<Br /><ParagraphStyleRange');
            content = content.replace(/<[/]ParagraphStyleRangeul>/g,'</ParagraphStyleRange><Br/>');
            content = content.replace(/<ParagraphStyleRangeul/g,'<Br /><ParagraphStyleRange');
            content = content.replace(/<ParagraphStyleRangecite/g,'<Br /><ParagraphStyleRange');
            content = content.replace(/<[/]ParagraphStyleRangecite>/g,'</ParagraphStyleRange><Br />');
            content = content.replace(/.svg/g,'.png');
            content = content.replace(/<ParagraphStyleRangemath/g,'<ParagraphStyleRange');
            content = content.replace(/<[/]ParagraphStyleRangemath/g,'</ParagraphStyleRange');
            //content = content.replace(/<[/]ParagraphStyleRangeh4>/g,'</ParagraphStyleRange><Br />');
            content = content.replace(/<ParagraphStyleRangeh4/g,'<Br /><ParagraphStyleRange');
            content = content.replace(/<Br[/]><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle[/]sidenote-6_h4">/g,'<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/sidenote-6_h4"><Br />');
            content = content.replace(/<Br [/]><Br [/]>/g,'<Br />');
            content = content.replace(/<[/]CharacterStyleRange> <ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle[/]ul_li_s9-scrollable">  <ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle[/]ul_li_s9-scrollable_Table-e_custom-Table">/g,'<Br /></CharacterStyleRange><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/ul_li_s9-scrollable"><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/ul_li_s9-scrollable_Table-e_custom-Table">');
            content = content.replace(/<[/]CharacterStyleRange><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle[/]ul_li_s9-scrollable"><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle[/]ul_li_s9-scrollable_table-e_custom-table">/g,'<Br /></CharacterStyleRange><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/ul_li_s9-scrollable"><ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/ul_li_s9-scrollable_table-e_custom-table">');
            content = content.replace(/<CharacterStyleRange AppliedCharacterStyle="CharacterStyle[/]list-step_li_p_para-e_li"><Content><[/]Content><[/]CharacterStyleRange>/g,"<Br />");
            content = content.replace(/<[/]CharacterStyleRange><CharacterStyleRange AppliedCharacterStyle="CharacterStyle[/]sup"/g,' <Br /></CharacterStyleRange><CharacterStyleRange AppliedCharacterStyle="CharacterStyle/sup" ');
            content = content.replace(/<[/]CharacterStyleRange> <CharacterStyleRange AppliedCharacterStyle="CharacterStyle[/]sub"/g,' <Br /></CharacterStyleRange><CharacterStyleRange AppliedCharacterStyle="CharacterStyle/sub" ');

            //img code
             content = content.replace(/rectangle/g, "Rectangle");
             content = content.replace(/Contenttype/g, "ContentType");
             content = content.replace(/storytitle/g, "storyTitle");
             content = content.replace(/parentinterfacechangecount/g, "ParentInterfaceChangeCount");
             content = content.replace(/targetinterfacechangecount/g, "TargetInterfaceChangeCount");
             content = content.replace(/lastupdatedinterfacechangecount/g, "LastUpdatedInterfaceChangeCount");
             content = content.replace(/overriddenpageitemprops/g, "OverriddenPageItemProps");
             content = content.replace(/horizontallayoutconstraints/g, "HorizontalLayoutConstraints");
             content = content.replace(/verticallayoutconstraints/g, "VerticalLayoutConstraints");
             content = content.replace(/strokeweight/g, "StrokeWeight");
             content = content.replace(/strokecolor/g, "StrokeColor");
             content = content.replace(/gradientfillstart/g, "GradientFillStart");
             content = content.replace(/gradientfilllength/g, "GradientFillLength");
             content = content.replace(/gradientfillangle/g, "GradientFillAngle");
             content = content.replace(/gradientstrokestart/g, "GradientStrokeStart");
             content = content.replace(/gradientstrokelength/g, "GradientStrokeLength");
             content = content.replace(/gradientstrokeangle/g, "GradientStrokeAngle");
             content = content.replace(/locked/g, "Locked");
             content = content.replace(/localdisplaysetting/g, "LocalDisplaySetting");
             content = content.replace(/gradientfillhilitelength/g, "GradientFillHiliteLength");
             content = content.replace(/gradientfillhiliteangle/g, "GradientFillHiliteAngle");
             content = content.replace(/gradientstrokehilitelength/g, "GradientStrokeHiliteLength");
             content = content.replace(/gradientstrokehiliteangle/g, "GradientStrokeHiliteAngle");
             content = content.replace(/appliedobjectstyle/g, "AppliedObjectStyle");
             content = content.replace(/visible/g, "Visible");
             content = content.replace(/itemtransform/g, "ItemTransform");
             content = content.replace(/pathgeometry/g, "PathGeometry");
             content = content.replace(/geometrypathtype/g, "GeometryPathType");
             content = content.replace(/pathopen/g, "PathOpen");
             content = content.replace(/pathpointarray/g, "PathPointArray");
             content = content.replace(/pathpointtype/g, "PathPointType");
             content = content.replace(/anchor/g, "Anchor");
             content = content.replace(/leftdirection/g, "LeftDirection");
             content = content.replace(/rightdirection/g, "RightDirection");
             content = content.replace(/<img/g,' <Image'); 
             content = content.replace(/space/g, "Space"); 
             content = content.replace(/actualppi/g, "ActualPpi"); 
             content = content.replace(/effectiveppi/g, "EffectivePpi"); 
             content = content.replace(/imagerenderingintent/g, "ImageRenderingIntent"); 
             content = content.replace(/overriddenpageitemprops/g, "OverriddenPageItemProps"); 
             content = content.replace(/localdisplaysetting/g, "LocalDisplaySetting"); 
             content = content.replace(/imagetypeName/g, "ImageTypeName"); 
             content = content.replace(/profile/g, "Profile"); 
             content = content.replace(/graphicbounds/g, "GraphicBounds"); 
             content = content.replace(/left=/g, " Left=");
             content = content.replace(/ top=/g, " Top=");
             content = content.replace(/ right=/g, " Right=");
             content = content.replace(/ bottom=/g, " Bottom=");
             content = content.replace(/ textwrappreference/g, "TextWrapPreference"); 
             content = content.replace(/inverse/g, "Inverse"); 
             content = content.replace(/applytomasterpageonly/g, "ApplyToMasterPageOnly"); 
             content = content.replace(/textwrapside/g, "TextWrapSide"); 
             content = content.replace(/textwrapmode/g, "TextWrapMode"); 
             content = content.replace(/textwrapoffset/g, "TextWrapOffset"); 
             content = content.replace(/contouroption/g, "ContourOption"); 
             content = content.replace(/contourtype/g, "ContourType"); 
             content = content.replace(/includeinsideedges/g, "IncludeInsideEdges"); 
             content = content.replace(/contourpathName/g, "ContourPathName"); 
             content = content.replace(/<link/g, "<Link"); 
             content = content.replace(/asseturl/g, "AssetURL"); 
             content = content.replace(/assetid/g, "AssetID"); 
             content = content.replace(/linkresourceuri/g, "LinkResourceURI"); 
             content = content.replace(/Linkresourceuri/g, "LinkResourceURI"); 
             content = content.replace(/LinkResourceuri/g, "LinkResourceURI"); 
             content = content.replace(/linkresourceformat/g, "LinkResourceFormat"); 
             content = content.replace(/Linkresourceformat/g, "LinkResourceFormat"); 
             content = content.replace(/LinkResourceformat/g, "LinkResourceFormat"); 
             content = content.replace(/storedstate/g, "StoredState"); 
             content = content.replace(/linkclassid/g, "LinkClassID"); 
             content = content.replace(/Linkclassid/g, "LinkClassID"); 
             content = content.replace(/LinkClassid/g, "LinkClassID"); 
             content = content.replace(/linkclientid/g, "LinkClientID"); 
             content = content.replace(/Linkclientid/g, "LinkClientID"); 
             content = content.replace(/LinkClientid/g, "LinkClientID"); 
             content = content.replace(/linkresourcemodified/g, "LinkResourceModified"); 
             content = content.replace(/Linkresourcemodified/g, "LinkResourceModified"); 
             content = content.replace(/LinkResourcemodified/g, "LinkResourceModified"); 
             content = content.replace(/linkobjectmodified/g, "LinkObjectModified"); 
             content = content.replace(/Linkobjectmodified/g, "LinkObjectModified"); 
             content = content.replace(/LinkObjectmodified/g, "LinkObjectModified"); 
             content = content.replace(/showinui/g, "ShowInUI"); 
             content = content.replace(/canembed/g, "CanEmbed"); 
             content = content.replace(/canunembed/g, "CanUnembed"); 
             content = content.replace(/canpackage/g, "CanPackage"); 
             content = content.replace(/importpolicy/g, "ImportPolicy"); 
             content = content.replace(/exportpolicy/g, "ExportPolicy"); 
             content = content.replace(/linkimportstamp/g, "LinkImportStamp"); 
             content = content.replace(/Linkimportstamp/g, "LinkImportStamp"); 
             content = content.replace(/LinkImportstamp/g, "LinkImportStamp"); 
             content = content.replace(/linkimportmodificationtime/g, "LinkImportModificationTime"); 
             content = content.replace(/Linkimportmodificationtime/g, "LinkImportModificationTime"); 
             content = content.replace(/LinkImportmodificationtime/g, "LinkImportModificationTime"); 
             content = content.replace(/LinkImportModificationtime/g, "LinkImportModificationTime"); 
             content = content.replace(/linkimporttime/g, "LinkImportTime"); 
             content = content.replace(/Linkimporttime/g, "LinkImportTime"); 
             content = content.replace(/LinkImporttime/g, "LinkImportTime"); 
             content = content.replace(/linkresourcesize/g, "LinkResourceSize"); 
             content = content.replace(/Linkresourcesize/g, "LinkResourceSize"); 
             content = content.replace(/LinkResourcesize/g, "LinkResourceSize"); 
             content = content.replace(/clippingpathsettings/g, "ClippingPathSettings"); 
             content = content.replace(/clippingtype/g, "ClippingType"); 
             content = content.replace(/invertpath/g, "InvertPath"); 
             content = content.replace(/restricttoframe/g, "RestrictToFrame"); 
             content = content.replace(/usehighresolutionimage/g, "UseHighResolutionImage"); 
             content = content.replace(/threshold/g, "Threshold"); 
             content = content.replace(/tolerance/g, "Tolerance"); 
             content = content.replace(/insetframe/g, "InsetFrame"); 
             content = content.replace(/appliedpathName/g, "AppliedPathName"); 
             content = content.replace(/index/g, "Index"); 
             content = content.replace(/imageiopreference/g, "ImageIOPreference"); 
             content = content.replace(/applyphotoshopclippingpath/g, "ApplyPhotoshopClippingPath"); 
             content = content.replace(/allowautoembedding/g, "AllowAutoEmbedding"); 
             content = content.replace(/alphachannelName/g, "AlphaChannelName"); 
             content = content.replace(/self/g, "Self"); 
             content = content.replace(/properties/g, "Properties"); 
             content = content.replace(/<[/]Rectangle>/g, " </Image> </Rectangle>"); 
             content = content.replace(/<ClippingPathSettings/g, "</Link> <ClippingPathSettings"); 
             content = content.replace(/story/g, "Story"); 
             content = content.replace(/appliedtocstyle/g, "AppliedTOCStyle"); 
             content = content.replace(/trackchanges/g, "TrackChanges"); 
             content = content.replace(/appliedNamedgrid/g, "AppliedNamedGrid"); 
             content = content.replace(/storypreference/g, "StoryPreference"); 
             content = content.replace(/Storypreference/g, "StoryPreference"); 
             content = content.replace(/opticalmarginalignment/g, "OpticalMarginAlignment"); 
             content = content.replace(/opticalmarginsize/g, "OpticalMarginSize"); 
             content = content.replace(/frametype/g, "FrameType"); 
             content = content.replace(/storyorientation/g, "StoryOrientation"); 
             content = content.replace(/Storyorientation/g, "StoryOrientation"); 
             content = content.replace(/storydirection/g, "StoryDirection"); 
             content = content.replace(/Storydirection/g, "StoryDirection"); 
             content = content.replace(/incopyexportoption/g, "InCopyExportOption"); 
             content = content.replace(/includegraphicproxies/g, "IncludeGraphicProxies"); 
             content = content.replace(/includeallresources/g, "IncludeAllResources"); 
             content = content.replace(/textframe/g, "TextFrame"); 
             content = content.replace(/parentstory/g, "ParentStory"); 
             content = content.replace(/parentStory/g, "ParentStory"); 
             content = content.replace(/previoustextframe/g, "PreviousTextFrame"); 
             content = content.replace(/previousTextFrame/g, "PreviousTextFrame"); 
             content = content.replace(/nexttextframe/g, "NextTextFrame"); 
             content = content.replace(/nextTextFrame/g, "NextTextFrame"); 
             content = content.replace(/textframepreference/g, "TextFramePreference"); 
             content = content.replace(/TextFramepreference/g, "TextFramePreference"); 
             content = content.replace(/insetspacing/g, "InsetSpacing"); 
             content = content.replace(/firstbaselineoffset/g, "FirstBaselineOffset"); 
             content = content.replace(/listitem/g, "ListItem"); 
             content = content.replace(/textcolumnfixedwidth/g, "TextColumnFixedWidth"); 
             content = content.replace(/Textcolumnfixedwidth/g, "TextColumnFixedWidth"); 
             content = content.replace(/TextColumnfixedwidth/g, "TextColumnFixedWidth"); 
             content = content.replace(/TextColumnFixedwidth/g, "TextColumnFixedWidth"); 
             content = content.replace(/textcolumnmaxwidth/g, "TextColumnMaxWidth"); 
             content = content.replace(/Textcolumnmaxwidth/g, "TextColumnMaxWidth"); 
             content = content.replace(/TextColumnmaxwidth/g, "TextColumnMaxWidth"); 
             content = content.replace(/TextColumnMaxwidth/g, "TextColumnMaxWidth"); 
             content = content.replace(/Anchoredobjectsetting/g, "AnchoredObjectSetting"); 
             content = content.replace(/Anchoredposition/g, "AnchoredPosition"); 
             content = content.replace(/spinerelative/g, "SpineRelative"); 
             content = content.replace(/Anchorpoint/g, "AnchorPoint"); 
             content = content.replace(/verticalalignment/g, "VerticalAlignment"); 
             content = content.replace(/Anchoryoffset/g, "AnchorYoffset"); 
             content = content.replace(/AnchorSpaceabove/g, "AnchorSpaceAbove"); 
             content = content.replace(/AnchorSpaceabove/g, "AnchorSpaceAbove"); 
             content = content.replace(/fillcolor/g, "FillColor"); 
             content = content.replace(/autosizingtype/g, "AutoSizingType"); 
             content = content.replace(/<label>/g, "<Label>");
             content = content.replace(/<[/]label>/g, "</Label>");
             content = content.replace(/keyvaluepair/g, "KeyValuePair");
             content = content.replace(/keyvaluePair/g, "KeyValuePair");
             content = content.replace(/keyValuePair/g, "KeyValuePair");
             content = content.replace(/key=/g, "Key=");
             content = content.replace(/value=/g, "Value=");
             content = content.replace(/lockposition/g, "LockPosition");
             content = content.replace(/Lockposition/g, "LockPosition");
             content = content.replace(/pinposition/g, "PinPosition");
             content = content.replace(/Pinposition/g, "PinPosition");
             content = content.replace(/horizontal/g, "Horizontal");
             content = content.replace(/vertical/g, "Vertical");
             content = content.replace(/alignment/g, "Alignment");
             content = content.replace(/point/g, "Point");
             content = content.replace(/Pointsize/g, "PointSize");
             content = content.replace(/xoffset/g, "Xoffset");
             content = content.replace(/reference/g, "Reference");
             content = content.replace(/columnspan/g, "ColumnSpan");
             content = content.replace(/Columnspan/g, "ColumnSpan");
             content = content.replace(/numberingcontinue/g, "NumberingContinue");
             content = content.replace(/Numberingcontinue/g, "NumberingContinue");
             content = content.replace(/numberingstartat/g, "NumberingStartAt");
             content = content.replace(/Numberingstartat/g, "NumberingStartAt");
             content = content.replace(/NumberingStartat/g, "NumberingStartAt");
             content = content.replace(/rotationangle/g, "RotationAngle");
             content = content.replace(/Rotationangle/g, "RotationAngle");
             content = content.replace(/singlerowheight/g, "SingleRowHeight");
             content = content.replace(/Singlerowheight/g, "SingleRowHeight");
             content = content.replace(/SingleRowheight/g, "SingleRowHeight");
             content = content.replace(/leftedgestrokepriority/g, "LeftEdgeStrokePriority");
             content = content.replace(/Leftedgestrokepriority/g, "LeftEdgeStrokePriority");
             content = content.replace(/LeftEdgestrokepriority/g, "LeftEdgeStrokePriority");
             content = content.replace(/LeftEdgeStrokepriority/g, "LeftEdgeStrokePriority");
             content = content.replace(/rightedgestrokepriority/g, "RightEdgeStrokePriority");
             content = content.replace(/Rightedgestrokepriority/g, "RightEdgeStrokePriority");
             content = content.replace(/RightEdgestrokepriority/g, "RightEdgeStrokePriority");
             content = content.replace(/RightEdgeStrokepriority/g, "RightEdgeStrokePriority");
             content = content.replace(/topedgestrokepriority/g, "TopEdgeStrokePriority");
             content = content.replace(/Topedgestrokepriority/g, "TopEdgeStrokePriority");
             content = content.replace(/TopEdgestrokepriority/g, "TopEdgeStrokePriority");
             content = content.replace(/TopEdgeStrokepriority/g, "TopEdgeStrokePriority");
             content = content.replace(/bottomedgestrokepriority/g, "BottomEdgeStrokePriority");
             content = content.replace(/Bottomedgestrokepriority/g, "BottomEdgeStrokePriority");
             content = content.replace(/BottomEdgestrokepriority/g, "BottomEdgeStrokePriority");
             content = content.replace(/BottomEdgeStrokepriority/g, "BottomEdgeStrokePriority");
             content = content.replace(/framefittingoption/g, "FrameFittingOption");
             content = content.replace(/Framefittingoption/g, "FrameFittingOption");
             content = content.replace(/FrameFittingoption/g, "FrameFittingOption");
             content = content.replace(/rowspan/g, "RowSpan");
             content = content.replace(/Rowspan/g, "RowSpan");
             content = content.replace(/celltype/g, "CellType");
             content = content.replace(/cellType/g, "CellType");
             content = content.replace(/Celltype/g, "CellType");
             content = content.replace(/<tablee/g, "<Table"); 
             content = content.replace(/<[/]tablee/g, " </Table"); 
             content = content.replace(/<Tablee/g, "<Table"); 
             content = content.replace(/<[/]Tablee/g, " </Table"); 
             content = content.replace(/autofit/g, "AutoFit"); 
             content = content.replace(/Autofit/g, "AutoFit"); 
             content = content.replace(/texttopinset/g, "TextTopInset"); 
             content = content.replace(/Texttopinset/g, "TextTopInset"); 
             content = content.replace(/TextTopinset/g, "TextTopInset"); 
             content = content.replace(/textleftinset/g, "TextLeftInset"); 
             content = content.replace(/textLeftinset/g, "TextLeftInset"); 
             content = content.replace(/Textleftinset/g, "TextLeftInset"); 
             content = content.replace(/TextLeftinset/g, "TextLeftInset"); 
             content = content.replace(/textbottominset/g, "TextBottomInset"); 
             content = content.replace(/Textbottominset/g, "TextBottomInset"); 
             content = content.replace(/TextBottominset/g, "TextBottomInset"); 
             content = content.replace(/textrightinset/g, "TextRightInset"); 
             content = content.replace(/Textrightinset/g, "TextRightInset"); 
             content = content.replace(/TextRightinset/g, "TextRightInset"); 
             content = content.replace(/fontstyle/g, "FontStyle"); 
             content = content.replace(/Fontstyle/g, "FontStyle"); 
             content = content.replace(/appliedfont/g, "AppliedFont"); 
             content = content.replace(/Appliedfont/g, "AppliedFont"); 
             content = content.replace(/fittingonemptyframe/g, "FittingOnEmptyFrame"); 
             content = content.replace(/Fittingonemptyframe/g, "FittingOnEmptyFrame"); 
             content = content.replace(/FittingOnemptyframe/g, "FittingOnEmptyFrame"); 
             content = content.replace(/FittingOnEmptyframe/g, "FittingOnEmptyFrame"); 
             content = content.replace(/fittingalignment/g, "FittingAlignment"); 
             content = content.replace(/Fittingalignment/g, "FittingAlignment"); 
             content = content.replace(/leftedgeStrokeWeight/g, "LeftEdgeStrokeWeight"); 
             content = content.replace(/LeftedgeStrokeWeight/g, "LeftEdgeStrokeWeight"); 
             content = content.replace(/rightedgeStrokeWeight/g, "RightEdgeStrokeWeight"); 
             content = content.replace(/RightedgeStrokeWeight/g, "RightEdgeStrokeWeight"); 
             content = content.replace(/topedgeStrokeWeight/g, "TopEdgeStrokeWeight"); 
             content = content.replace(/TopedgeStrokeWeight/g, "TopEdgeStrokeWeight"); 
             content = content.replace(/bottomedgeStrokeWeight/g, "BottomEdgeStrokeWeight"); 
             content = content.replace(/BottomedgeStrokeWeight/g, "BottomEdgeStrokeWeight"); 
             content = content.replace(/leftedgeStrokeColor/g, "LeftEdgeStrokeColor"); 
             content = content.replace(/LeftedgeStrokeColor/g, "LeftEdgeStrokeColor"); 
             content = content.replace(/topedgeStrokeColor/g, "TopEdgeStrokeColor"); 
             content = content.replace(/TopedgeStrokeColor/g, "TopEdgeStrokeColor"); 
             content = content.replace(/rightedgeStrokeColor/g, "RightEdgeStrokeColor"); 
             content = content.replace(/RightedgeStrokeColor/g, "RightEdgeStrokeColor"); 
             content = content.replace(/bottomedgeStrokeColor/g, "BottomEdgeStrokeColor"); 
             content = content.replace(/BottomedgeStrokeColor/g, "BottomEdgeStrokeColor"); 
             content = content.replace(/leftedgestroketype/g, "LeftEdgeStrokeType"); 
             content = content.replace(/Leftedgestroketype/g, "LeftEdgeStrokeType"); 
             content = content.replace(/LeftEdgestroketype/g, "LeftEdgeStrokeType"); 
             content = content.replace(/LeftEdgeStroketype/g, "LeftEdgeStrokeType"); 
             content = content.replace(/LeftedgeStrokeType/g, "LeftEdgeStrokeType"); 
             content = content.replace(/rightedgestroketype/g, "RightEdgeStrokeType"); 
             content = content.replace(/RightedgeStrokeType/g, "RightEdgeStrokeType"); 
             content = content.replace(/topedgestroketype/g, "TopEdgeStrokeType"); 
             content = content.replace(/TopedgeStrokeType/g, "TopEdgeStrokeType"); 
             content = content.replace(/bottomedgestroketype/g, "BottomEdgeStrokeType"); 
             content = content.replace(/BottomedgeStrokeType/g, "BottomEdgeStrokeType"); 
             content = content.replace(/fittingalignment/g, "FittingAlignment"); 
             content = content.replace(/Fittingalignment/g, "FittingAlignment"); 
             content = content.replace(/fittingAlignment/g, "FittingAlignment"); 
             content = content.replace(/leftcrop/g, "LeftCrop"); 
             content = content.replace(/Leftcrop/g, "LeftCrop"); 
             content = content.replace(/topcrop/g, "TopCrop"); 
             content = content.replace(/Topcrop/g, "TopCrop"); 
             content = content.replace(/rightcrop/g, "RightCrop"); 
             content = content.replace(/Rightcrop/g, "RightCrop"); 
             content = content.replace(/bottomcrop/g, "BottomCrop"); 
             content = content.replace(/Bottomcrop/g, "BottomCrop"); 
             content = content.replace(/useMinimumHeightforautosizing/g, "UseMinimumHeightForAutoSizing"); 
             content = content.replace(/useminimumheightforautosizing/g, "UseMinimumHeightForAutoSizing"); 
             content = content.replace(/Useminimumheightforautosizing/g, "UseMinimumHeightForAutoSizing"); 
             content = content.replace(/UseMinimumheightforautosizing/g, "UseMinimumHeightForAutoSizing"); 
             content = content.replace(/UseMinimumHeightforautosizing/g, "UseMinimumHeightForAutoSizing"); 
             content = content.replace(/UseMinimumHeightForautosizing/g, "UseMinimumHeightForAutoSizing"); 
             content = content.replace(/UseMinimumHeightForAutosizing/g, "UseMinimumHeightForAutoSizing"); 
             content = content.replace(/verticalbalancecolumns/g, "VerticalBalanceColumns"); 
             content = content.replace(/Verticalbalancecolumns/g, "VerticalBalanceColumns"); 
             content = content.replace(/VerticalBalancecolumns/g, "VerticalBalanceColumns"); 
             content = content.replace(/autoSizingType/g, "AutoSizingType"); 
             content = content.replace(/<[/]TextFrame>/g, ' <ObjectExportOption AltTextSourceType="SourceXMLStructure" ActualTextSourceType="SourceXMLStructure" CustomAltText="ID/" CustomActualText="ID/" ApplyTagType="TagFromStructure" CustomImageConversion="false" ImageConversionType="JPEG" CustomImageSizeOption="SizeRelativeToPageWidth" ImageExportResolution="Ppi300" GIFOptionsPalette="AdaptivePalette" GIFOptionsInterlaced="true" JPEGOptionsQuality="High" JPEGOptionsFormat="BaselineEncoding" ImageAlignment="AlignLeft" ImageSpaceBefore="0" ImageSpaceAfter="0" UseImagePageBreak="false" ImagePageBreak="PageBreakBefore" CustomImageAlignment="false" SpaceUnit="CssPixel" CustomLayout="false" CustomLayoutType="AlignmentAndSpacing"><Properties><AltMetadataProperty NamespacePrefix="ID/" PropertyPath="ID/" /> <ActualMetadataProperty NamespacePrefix="ID/" PropertyPath="ID/" /></Properties></ObjectExportOption></TextFrame>');
             content = content.replace(/PReference/g, "Preference");
             content = content.replace(/<eps/g, '<EPS'); 
             content = content.replace(/<[/]eps/g, ' </EPS'); 
             content = content.replace(/objectexportoption/g, 'ObjectExportOption'); 
             content = content.replace(/Objectexportoption/g, 'ObjectExportOption'); 
             content = content.replace(/ObjectExportoption/g, 'ObjectExportOption'); 
             content = content.replace(/epubtype/g, 'EpubType'); 
             content = content.replace(/Epubtype/g, 'EpubType'); 
             content = content.replace(/sizetype/g, 'SizeType'); 
             content = content.replace(/Sizetype/g, 'SizeType'); 
             content = content.replace(/customsize/g, 'CustomSize'); 
             content = content.replace(/Customsize/g, 'CustomSize'); 
             content = content.replace(/preserveappearancefromlayout/g, 'PreserveAppearanceFromLayout'); 
             content = content.replace(/Preserveappearancefromlayout/g, 'PreserveAppearanceFromLayout'); 
             content = content.replace(/PreserveAppearancefromlayout/g, 'PreserveAppearanceFromLayout'); 
             content = content.replace(/PreserveAppearanceFromlayout/g, 'PreserveAppearanceFromLayout'); 
             content = content.replace(/alttextsourcetype/g, 'AltTextSourceType'); 
             content = content.replace(/Alttextsourcetype/g, 'AltTextSourceType'); 
             content = content.replace(/AltTextsourcetype/g, 'AltTextSourceType'); 
             content = content.replace(/AltTextSourcetype/g, 'AltTextSourceType'); 
             content = content.replace(/actualtextsourcetype/g, 'ActualTextSourceType'); 
             content = content.replace(/Actualtextsourcetype/g, 'ActualTextSourceType'); 
             content = content.replace(/ActualTextsourcetype/g, 'ActualTextSourceType'); 
             content = content.replace(/ActualTextSourcetype/g, 'ActualTextSourceType'); 
             content = content.replace(/customalttext/g, 'CustomAltText'); 
             content = content.replace(/Customalttext/g, 'CustomAltText'); 
             content = content.replace(/CustomAlttext/g, 'CustomAltText'); 
             content = content.replace(/customactualtext/g, 'CustomActualText'); 
             content = content.replace(/Customactualtext/g, 'CustomActualText'); 
             content = content.replace(/CustomActualtext/g, 'CustomActualText'); 
             content = content.replace(/applytagtype/g, 'ApplyTagType'); 
             content = content.replace(/Applytagtype/g, 'ApplyTagType'); 
             content = content.replace(/ApplyTagtype/g, 'ApplyTagType'); 
             content = content.replace(/imageconversiontype/g, 'ImageConversionType'); 
             content = content.replace(/Imageconversiontype/g, 'ImageConversionType'); 
             content = content.replace(/ImageConversiontype/g, 'ImageConversionType'); 
             content = content.replace(/imageexportresolution/g, 'ImageExportResolution'); 
             content = content.replace(/Imageexportresolution/g, 'ImageExportResolution'); 
             content = content.replace(/ImageExportresolution/g, 'ImageExportResolution'); 
             content = content.replace(/gifoptionspalette/g, 'GIFOptionsPalette'); 
             content = content.replace(/Gifoptionspalette/g, 'GIFOptionsPalette'); 
             content = content.replace(/GIfoptionspalette/g, 'GIFOptionsPalette'); 
             content = content.replace(/GIFoptionspalette/g, 'GIFOptionsPalette'); 
             content = content.replace(/GIFOptionspalette/g, 'GIFOptionsPalette'); 
             content = content.replace(/gifoptionsinterlaced/g, 'GIFOptionsInterlaced'); 
             content = content.replace(/Gifoptionsinterlaced/g, 'GIFOptionsInterlaced'); 
             content = content.replace(/GIfoptionsinterlaced/g, 'GIFOptionsInterlaced'); 
             content = content.replace(/GIFoptionsinterlaced/g, 'GIFOptionsInterlaced'); 
             content = content.replace(/GIFOptionsinterlaced/g, 'GIFOptionsInterlaced'); 
             content = content.replace(/jpegoptionsquality/g, 'JPEGOptionsQuality'); 
             content = content.replace(/Jpegoptionsquality/g, 'JPEGOptionsQuality'); 
             content = content.replace(/JPegoptionsquality/g, 'JPEGOptionsQuality'); 
             content = content.replace(/JPEgoptionsquality/g, 'JPEGOptionsQuality'); 
             content = content.replace(/JPEGoptionsquality/g, 'JPEGOptionsQuality'); 
             content = content.replace(/JPEGOptionsquality/g, 'JPEGOptionsQuality'); 
             content = content.replace(/jpegoptionsformat/g, 'JPEGOptionsFormat'); 
             content = content.replace(/Jpegoptionsformat/g, 'JPEGOptionsFormat'); 
             content = content.replace(/JPegoptionsformat/g, 'JPEGOptionsFormat'); 
             content = content.replace(/JPEgoptionsformat/g, 'JPEGOptionsFormat'); 
             content = content.replace(/JPEGoptionsformat/g, 'JPEGOptionsFormat'); 
             content = content.replace(/JPEGOptionsformat/g, 'JPEGOptionsFormat'); 
             content = content.replace(/imagealignment/g, 'ImageAlignment'); 
             content = content.replace(/Imagealignment/g, 'ImageAlignment'); 
             content = content.replace(/imageAlignment/g, 'ImageAlignment'); 
             content = content.replace(/imagespacebefore/g, 'ImageSpaceBefore'); 
             content = content.replace(/Imagespacebefore/g, 'ImageSpaceBefore'); 
             content = content.replace(/imageSpacebefore/g, 'ImageSpaceBefore'); 
             content = content.replace(/ImageSpacebefore/g, 'ImageSpaceBefore'); 
             content = content.replace(/imagespaceafter/g, 'ImageSpaceAfter'); 
             content = content.replace(/Imagespaceafter/g, 'ImageSpaceAfter'); 
             content = content.replace(/imageSpaceafter/g, 'ImageSpaceAfter'); 
             content = content.replace(/ImageSpaceafter/g, 'ImageSpaceAfter'); 
             content = content.replace(/useimagepagebreak/g, 'UseImagePageBreak'); 
             content = content.replace(/Useimagepagebreak/g, 'UseImagePageBreak'); 
             content = content.replace(/UseImagepagebreak/g, 'UseImagePageBreak'); 
             content = content.replace(/UseImagePagebreak/g, 'UseImagePageBreak'); 
             content = content.replace(/imagepagebreak/g, 'ImagePageBreak'); 
             content = content.replace(/Imagepagebreak/g, 'ImagePageBreak'); 
             content = content.replace(/ImagePagebreak/g, 'ImagePageBreak'); 
             content = content.replace(/customimagealignment/g, 'CustomImageAlignment'); 
             content = content.replace(/Customimagealignment/g, 'CustomImageAlignment'); 
             content = content.replace(/customimageAlignment/g, 'CustomImageAlignment'); 
             content = content.replace(/CustomimageAlignment/g, 'CustomImageAlignment'); 
             content = content.replace(/CustomImagealignment/g, 'CustomImageAlignment'); 
             content = content.replace(/spaceunit/g, 'SpaceUnit'); 
             content = content.replace(/Spaceunit/g, 'SpaceUnit'); 
             content = content.replace(/customlayout/g, 'CustomLayout'); 
             content = content.replace(/Customlayout/g, 'CustomLayout'); 
             content = content.replace(/customlayouttype/g, 'CustomLayoutType'); 
             content = content.replace(/Customlayouttype/g, 'CustomLayoutType'); 
             content = content.replace(/CustomLayouttype/g, 'CustomLayoutType'); 
             content = content.replace(/altmetadataproperty/g, 'AltMetadataProperty'); 
             content = content.replace(/Altmetadataproperty/g, 'AltMetadataProperty'); 
             content = content.replace(/AltMetadataproperty/g, 'AltMetadataProperty'); 
             content = content.replace(/NameSpaceprefix/g, 'NamespacePrefix'); 
             content = content.replace(/propertypath/g, 'PropertyPath'); 
             content = content.replace(/Propertypath/g, 'PropertyPath'); 
             content = content.replace(/actualmetadataproperty/g, 'ActualMetadataProperty'); 
             content = content.replace(/Actualmetadataproperty/g, 'ActualMetadataProperty'); 
             content = content.replace(/ActualMetadataproperty/g, 'ActualMetadataProperty'); 
             content = content.replace(/grayvectorpolicy/g, 'GrayVectorPolicy'); 
             content = content.replace(/Grayvectorpolicy/g, 'GrayVectorPolicy'); 
             content = content.replace(/GrayVectorpolicy/g, 'GrayVectorPolicy'); 
             content = content.replace(/rgbvectorpolicy/g, 'RGBVectorPolicy'); 
             content = content.replace(/Rgbvectorpolicy/g, 'RGBVectorPolicy'); 
             content = content.replace(/RGbvectorpolicy/g, 'RGBVectorPolicy'); 
             content = content.replace(/RGBvectorpolicy/g, 'RGBVectorPolicy'); 
             content = content.replace(/RGBVectorpolicy/g, 'RGBVectorPolicy'); 
             content = content.replace(/cmykvectorpolicy/g, 'CMYKVectorPolicy'); 
             content = content.replace(/Cmykvectorpolicy/g, 'CMYKVectorPolicy'); 
             content = content.replace(/CMykvectorpolicy/g, 'CMYKVectorPolicy'); 
             content = content.replace(/CMYkvectorpolicy/g, 'CMYKVectorPolicy'); 
             content = content.replace(/CMYKvectorpolicy/g, 'CMYKVectorPolicy'); 
             content = content.replace(/CMYKVectorpolicy/g, 'CMYKVectorPolicy'); 
             content = content.replace(/<[/]EPS> <[/]Image>/g, ' </EPS>'); 
             content = content.replace(/<[/]ParagraphStyleRange> <Br [/]><[/]ParagraphStyleRange><Br [/]><[/]ParagraphStyleRange><Br [/]>/g, ' </ParagraphStyleRange></ParagraphStyleRange></ParagraphStyleRange><Br />');
             content = content.replace(/<[/]ParagraphStyleRange><Br [/]><[/]ParagraphStyleRange><Br [/]><Br [/]>/g, '</ParagraphStyleRange></ParagraphStyleRange><Br /><Br />');
             content = content.replace(/<Br [/]><[/]ParagraphStyleRange><[/]ParagraphStyleRange><Br [/]><Br [/]>/g, '</ParagraphStyleRange></ParagraphStyleRange><Br /><Br />');
             content = content.replace(/<[/]pdf><[/]AnchoredObjectSetting><[/]Image>/g, '</PDF>');
             content = content.replace(/<[/]pdf><[/]Image>/g, '</PDF>');
             content = content.replace(/<[/]TextFrame><Br [/]><[/]ParagraphStyleRange><Br [/]><ParagraphStyleRange/g, '</TextFrame> <Br /></ParagraphStyleRange><ParagraphStyleRange'); 
             content = content.replace(/<pdf/g, '<PDF'); 
             content = content.replace(/<[/]ParagraphStyleRange> <Br [/]><[/]ParagraphStyleRange><Table/g, '</ParagraphStyleRange> </ParagraphStyleRange> <Table'); 
             content = content.replace(/graphiclayeroption/g, 'GraphicLayerOption'); 
             content = content.replace(/Graphiclayeroption/g, 'GraphicLayerOption'); 
             content = content.replace(/GraphicLayeroption/g, 'GraphicLayerOption'); 
             content = content.replace(/pdfattribute/g, 'PDFAttribute'); 
             content = content.replace(/PDFattribute/g, 'PDFAttribute'); 
             content = content.replace(/pagenumber/g, 'PageNumber'); 
             content = content.replace(/Pagenumber/g, 'PageNumber'); 
             content = content.replace(/pdfcrop/g, 'PDFCrop'); 
             content = content.replace(/transparentbackground/g, 'TransparentBackground'); 
             content = content.replace(/Transparentbackground/g, 'TransparentBackground'); 
             while(content.match(/<[/]ParagraphStyleRangeh4>/g).length!=1){
              content=content.replace(/<[/]ParagraphStyleRangeh4>/,'</ParagraphStyleRange><Br />');
             }
             content = content.replace(/<[/]ParagraphStyleRangeh4>/g,'</ParagraphStyleRange>');
             return content; 
        }
}

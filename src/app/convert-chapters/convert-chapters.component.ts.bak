import { Component, OnInit, Inject, ViewChild} from '@angular/core';
import { ActivatedRoute} from "@angular/router";
import { ProjectDataService } from '../featureModules/editor/pod/services/project-data.service';
import { ProcessPDFService } from '../featureModules/editor/pod/services/pdf/process-pdf.service';
import { DomSanitizer } from '@angular/platform-browser';
import { DOCUMENT } from '@angular/platform-browser';
import {MatPaginator, MatTableDataSource, MatSort} from '@angular/material';
import { AppConfig } from '../app-config';
import { NgxSpinnerService } from 'ngx-spinner';

@Component({
  selector: 'app-convert-chapters',
  templateUrl: './convert-chapters.component.html',
  styleUrls: ['./convert-chapters.component.scss']
})
export class ConvertChaptersComponent implements OnInit {
  message;
  tocContent;
  chaptersList;
  projectName;
  chapterCount;
  dataSource;
  displayedColumns = ['tocname','pagenumber','poptips_container','htmlstatus'];
  startPageNumber;
  APIUrl:any;
  uploadURL:any;
  page_number;
  pop_tips;
  two_column;
  
  constructor(private dataservice: ProjectDataService,private processpdfservice: ProcessPDFService,private spinner: NgxSpinnerService,
    private route:ActivatedRoute,
    private sanitizer:DomSanitizer, 
    private appConfig: AppConfig,
    @Inject(DOCUMENT) private document: any) { }
    @ViewChild(MatPaginator) paginator: MatPaginator;
    ngOnInit() {
      // this.spinner.show();
      this.route.params.subscribe( params =>{
        this.getProjectDetails(params);
      });
      this.APIUrl=this.appConfig.config.apiURL;
      this.uploadURL = this.appConfig.config.uploadsURL;
      console.log("apirurl loaded as ->  ",this.appConfig.config);
      this.document.body.classList.add('wrapCont');
      this.document.body.classList.remove('open-toc');
    }

  applyFilter(filterValue: string) {
    filterValue = filterValue.trim(); // Remove whitespace
    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches
    this.dataSource.filter = filterValue;
  }

  getContentList(content,type) {
    return new Promise((resolve, reject) => {
              this.tocContent = this.sanitizer.bypassSecurityTrustHtml(content);
                var elem = document.getElementById("tocContentHide");
                var contentsList;
                if (type == 'epub') {
                  contentsList =  window.document.getElementsByTagName("content");
                }else{
                  contentsList =  window.document.getElementsByTagName("exhibit");
                }
      setTimeout(() => {
    resolve(contentsList);
      }, 100);
    });
  }
  
  getProjectDetails(project) {
    this.dataservice.getProjectData(project).subscribe(data=> {
      var response = JSON.parse(data);
      var extension = response.project_type;
      var folder = response.project_name;
      this.projectName = folder;
      this.dataservice.getTocData(folder,extension).subscribe( toc=>{
      this.getContentList(toc,extension).then(
        (val)=> {
          this.dataservice.getchapterstatus(project,val,folder,extension).subscribe(tocstatus => {
          this.chaptersList = tocstatus;
          this.chapterCount = this.chaptersList.length;
          this.chaptersList[0].select = true;
          this.dataSource = new MatTableDataSource<PeriodicElement>(this.chaptersList);
          this.dataSource.paginator = this.paginator;
          });
         });
       })
    });
    }

    downloadPdf(toc) {
      console.log("apirurl loaded as ->  ",this.appConfig.config);
      var url = this.uploadURL+toc.folder+'/s9ml/'+toc.chapter_name+'/'+toc.chapter_name+'.pdf';
      window.open(url);
    }

    createFile(toc,index,page,filetype,pop_tips=false,two_column=false) {
      var self = this;
      let promise = new Promise(function(resolve, reject) {
        if(filetype == 'html') {
          self.processpdfservice.generateHtml(toc,index,page,pop_tips,two_column);
        } else {
          self.processpdfservice.generatePDF(toc,index);
        }
        resolve(true);
      });
      return promise;
    }

    generateHtml(toc,index) { 
      
      this.page_number=(document.getElementById('s_page_number'+index) as HTMLInputElement).value;
      this.pop_tips=(document.getElementById('s_poptips'+index) as HTMLInputElement).checked;
      this.two_column=(document.getElementById('s_twocolumn'+index) as HTMLInputElement).checked;      

		if (this.page_number > 0) {
	    var self=this;  
        toc.enlargeHtml = true;
        this.createFile(toc,index,toc.startPageNumber,'html',this.pop_tips,this.two_column).then(function(resolvestatus) {
          if(resolvestatus){
            //toc.enlargeHtml = false;
			toc.pc_status='1';
          }
        });
		}else {
      
		 console.log('Start Page Number field is required!!'+index);
		 (document.getElementById('s_page_number'+index) as HTMLInputElement).focus();
		 return false;
		}
    }

    generatePDF(toc,index){
        toc.enlargePdf = true;
		var self=this;
        this.createFile(toc,index,toc.startPageNumber,'pdf').then(function(resolvestatus) {
          if(resolvestatus){
            //toc.enlargePdf = false;
			toc.pc_status='2';
          }
        });
    }

    pageNumNav(nav,toc) {
        if(nav==0){
          if(toc.startPageNumber == 0 || !toc.startPageNumber || toc.html){
            return false;
          }
          toc.startPageNumber -=1;
        } else {
          if(toc.html){
            return false;
          }
          if(toc.startPageNumber){
            toc.startPageNumber +=1;
          } else {
            toc.startPageNumber = 1;
          }
          
        }
    }
}

export interface PeriodicElement {
  name: string;
  position: number;
  weight: number;
  symbol: string;
}
